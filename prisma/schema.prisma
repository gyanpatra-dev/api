generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}


model User {
  user_id    Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  branch     Branch?
  semester   String?
  saved_post SavedPost?
  role       Role      @default(USER)
}

model SavedPost {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Branch {
  branch_id    Int      @id @default(autoincrement())
  userid       Int?     @unique
  user         User?    @relation(fields: [userid], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  year         Year[]   @relation("BranchYear")
  displayimage String
  branchname   String   @unique
}

model Year {
  year_id   Int       @id @default(autoincrement())
  branchId  Int
  branch    Branch    @relation("BranchYear", fields: [branchId], references: [branch_id], onDelete: Cascade)
  subjects  Subject[]
}

model Subject {
  subject_id            Int     @id @default(autoincrement())
  yearId                Int
  year                  Year    @relation(fields: [yearId], references: [year_id], onDelete: Cascade, onUpdate: Cascade)
  pyqs                  Pyq[]
  notes                 Notes[]
  subjectname           String
  branchname            String
}

model Pyq {
  pyq_id    Int     @id @default(autoincrement())
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
  links     String
  pyqtype   String  @default("MID")

}

model Notes {
  notes_id  Int     @id @default(autoincrement())
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
  link      String  
}
